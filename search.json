[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 sparseprepr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Molitor. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Molitor D (2022). sparseprepr: Pre Processing Sparse Matrices. R package version 0.0.0.9005.","code":"@Manual{,   title = {sparseprepr: Pre Processing for Sparse Matrices},   author = {Daniel Molitor},   year = {2022},   note = {R package version 0.0.0.9005}, }"},{"path":"/index.html","id":"sparseprepr","dir":"","previous_headings":"","what":"Pre Processing for Sparse Matrices","title":"Pre Processing for Sparse Matrices","text":"goal sparseprepr enable common pre-processing actions sparse matrices provide memory-efficient workflow modeling scale.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Pre Processing for Sparse Matrices","text":"Install Github :","code":"# install.packages(devtools) devtools::install_github(\"dmolitor/sparseprepr\")"},{"path":"/index.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Pre Processing for Sparse Matrices","text":"sparseprepr functionality supports sparse matrices coded sorted compressed column-oriented form, formally class CsparseMatrix. Although Matrix package also defines sorted compressed row-oriented form (RsparseMatrix) triplet form (TsparseMatrix) sparse matrices, makes clear “operations sparse matrices performed using compressed, column-oriented CsparseMatrix representation,” even matrices created TsparseMatrix RsparseMatrix forms convenience, “created, however, matrix generally coerced CsparseMatrix operations.”","code":""},{"path":"/index.html","id":"core-functionality","dir":"","previous_headings":"","what":"Core Functionality","title":"Pre Processing for Sparse Matrices","text":"following toy example shows number pre-processing features sparseprepr provides. matrix shown number contrived features; column cor_with_x3 highly correlated column x3, const_col const_col2 zero-variance columns, dup_x2 identical x2, sparse_col highly sparse column. Common pre-processing steps provided sparseprepr include: Dropping highly correlated columns Dropping empty columns Dropping constant columns Dropping duplicated columns Dropping highly sparse columns Transforming matrix columns:","code":"library(sparseprepr) #>  #> Attaching package: 'sparseprepr' #> The following object is masked from 'package:stats': #>  #>     cor  x #> 10 x 8 sparse Matrix of class \"dgCMatrix\" #>          x1     x2     x3 cor_with_x3 const_col const_col2 dup_x2 sparse_col #>  [1,] -1.40  .     -1.100       -1.10         1          .  .              . #>  [2,] -1.20 -0.560 -0.300       -0.30         1          . -0.560          . #>  [3,]  0.35 -1.400 -0.390       -0.39         1          . -1.400          . #>  [4,]  1.10 -0.130 -0.780       -0.78         1          . -0.130          . #>  [5,] -2.10 -0.200 -0.170       -0.17         1          . -0.200          . #>  [6,] -1.80 -0.360  0.950        0.95         1          . -0.360          . #>  [7,]  2.20  0.092  .            .            1          .  0.092          . #>  [8,]  0.76  .     -0.380       -0.38         1          .  .              . #>  [9,]  1.30 -0.780 -0.810       -0.81         1          . -0.780          . #> [10,]  0.81 -0.056 -0.809       -0.81         1          . -0.056          1 remove_correlated(x, threshold = 0.99) #> Warning: Column(s) 5, 6 have a standard deviation of 0 #> 10 x 6 sparse Matrix of class \"dgCMatrix\" #>          x1     x2     x3 const_col const_col2 sparse_col #>  [1,] -1.40  .     -1.100         1          .          . #>  [2,] -1.20 -0.560 -0.300         1          .          . #>  [3,]  0.35 -1.400 -0.390         1          .          . #>  [4,]  1.10 -0.130 -0.780         1          .          . #>  [5,] -2.10 -0.200 -0.170         1          .          . #>  [6,] -1.80 -0.360  0.950         1          .          . #>  [7,]  2.20  0.092  .             1          .          . #>  [8,]  0.76  .     -0.380         1          .          . #>  [9,]  1.30 -0.780 -0.810         1          .          . #> [10,]  0.81 -0.056 -0.809         1          .          1 remove_empty(x) #> 10 x 7 sparse Matrix of class \"dgCMatrix\" #>          x1     x2     x3 cor_with_x3 const_col dup_x2 sparse_col #>  [1,] -1.40  .     -1.100       -1.10         1  .              . #>  [2,] -1.20 -0.560 -0.300       -0.30         1 -0.560          . #>  [3,]  0.35 -1.400 -0.390       -0.39         1 -1.400          . #>  [4,]  1.10 -0.130 -0.780       -0.78         1 -0.130          . #>  [5,] -2.10 -0.200 -0.170       -0.17         1 -0.200          . #>  [6,] -1.80 -0.360  0.950        0.95         1 -0.360          . #>  [7,]  2.20  0.092  .            .            1  0.092          . #>  [8,]  0.76  .     -0.380       -0.38         1  .              . #>  [9,]  1.30 -0.780 -0.810       -0.81         1 -0.780          . #> [10,]  0.81 -0.056 -0.809       -0.81         1 -0.056          1 remove_constant(x) #> 10 x 6 sparse Matrix of class \"dgCMatrix\" #>          x1     x2     x3 cor_with_x3 dup_x2 sparse_col #>  [1,] -1.40  .     -1.100       -1.10  .              . #>  [2,] -1.20 -0.560 -0.300       -0.30 -0.560          . #>  [3,]  0.35 -1.400 -0.390       -0.39 -1.400          . #>  [4,]  1.10 -0.130 -0.780       -0.78 -0.130          . #>  [5,] -2.10 -0.200 -0.170       -0.17 -0.200          . #>  [6,] -1.80 -0.360  0.950        0.95 -0.360          . #>  [7,]  2.20  0.092  .            .     0.092          . #>  [8,]  0.76  .     -0.380       -0.38  .              . #>  [9,]  1.30 -0.780 -0.810       -0.81 -0.780          . #> [10,]  0.81 -0.056 -0.809       -0.81 -0.056          1 remove_duplicate(x) #> 10 x 7 sparse Matrix of class \"dgCMatrix\" #>          x1     x2     x3 cor_with_x3 const_col const_col2 sparse_col #>  [1,] -1.40  .     -1.100       -1.10         1          .          . #>  [2,] -1.20 -0.560 -0.300       -0.30         1          .          . #>  [3,]  0.35 -1.400 -0.390       -0.39         1          .          . #>  [4,]  1.10 -0.130 -0.780       -0.78         1          .          . #>  [5,] -2.10 -0.200 -0.170       -0.17         1          .          . #>  [6,] -1.80 -0.360  0.950        0.95         1          .          . #>  [7,]  2.20  0.092  .            .            1          .          . #>  [8,]  0.76  .     -0.380       -0.38         1          .          . #>  [9,]  1.30 -0.780 -0.810       -0.81         1          .          . #> [10,]  0.81 -0.056 -0.809       -0.81         1          .          1 remove_sparse(x, threshold = 0.9) #> 10 x 6 sparse Matrix of class \"dgCMatrix\" #>          x1     x2     x3 cor_with_x3 const_col dup_x2 #>  [1,] -1.40  .     -1.100       -1.10         1  .     #>  [2,] -1.20 -0.560 -0.300       -0.30         1 -0.560 #>  [3,]  0.35 -1.400 -0.390       -0.39         1 -1.400 #>  [4,]  1.10 -0.130 -0.780       -0.78         1 -0.130 #>  [5,] -2.10 -0.200 -0.170       -0.17         1 -0.200 #>  [6,] -1.80 -0.360  0.950        0.95         1 -0.360 #>  [7,]  2.20  0.092  .            .            1  0.092 #>  [8,]  0.76  .     -0.380       -0.38         1  .     #>  [9,]  1.30 -0.780 -0.810       -0.81         1 -0.780 #> [10,]  0.81 -0.056 -0.809       -0.81         1 -0.056 # Append squared and cubed terms transform_cols(   x[, 1:3],    fns = list(function(i) i^2, function(i) i^3),    which.cols = paste0(\"x\", 2:3),    name.sep = list(\"squared\", \"cubed\") ) #> 10 x 7 sparse Matrix of class \"dgCMatrix\" #>          x1     x2     x3 x2_squared x3_squared     x2_cubed   x3_cubed #>  [1,] -1.40  .     -1.100   .          1.210000  .           -1.3310000 #>  [2,] -1.20 -0.560 -0.300   0.313600   0.090000 -0.175616000 -0.0270000 #>  [3,]  0.35 -1.400 -0.390   1.960000   0.152100 -2.744000000 -0.0593190 #>  [4,]  1.10 -0.130 -0.780   0.016900   0.608400 -0.002197000 -0.4745520 #>  [5,] -2.10 -0.200 -0.170   0.040000   0.028900 -0.008000000 -0.0049130 #>  [6,] -1.80 -0.360  0.950   0.129600   0.902500 -0.046656000  0.8573750 #>  [7,]  2.20  0.092  .       0.008464   .         0.000778688  .         #>  [8,]  0.76  .     -0.380   .          0.144400  .           -0.0548720 #>  [9,]  1.30 -0.780 -0.810   0.608400   0.656100 -0.474552000 -0.5314410 #> [10,]  0.81 -0.056 -0.809   0.003136   0.654481 -0.000175616 -0.5294751"},{"path":"/index.html","id":"pipe-workflow","dir":"","previous_headings":"","what":"Pipe Workflow","title":"Pre Processing for Sparse Matrices","text":"pre-processing steps can utilized user-friendly manner via magrittr pipe (%>%) base pipe (|> - R 4.1 greater).","code":"x |>   remove_constant() |>   remove_correlated(threshold = 0.99) |>   remove_duplicate() |>   remove_sparse(threshold = 0.9) |>   transform_cols(     fns = list(function(i) i^2, function(i) i^3),     which.cols = paste0(\"x\", 2:3),     name.sep = list(\"squared\", \"cubed\")   ) #> 10 x 7 sparse Matrix of class \"dgCMatrix\" #>          x1     x2     x3 x2_squared x3_squared     x2_cubed   x3_cubed #>  [1,] -1.40  .     -1.100   .          1.210000  .           -1.3310000 #>  [2,] -1.20 -0.560 -0.300   0.313600   0.090000 -0.175616000 -0.0270000 #>  [3,]  0.35 -1.400 -0.390   1.960000   0.152100 -2.744000000 -0.0593190 #>  [4,]  1.10 -0.130 -0.780   0.016900   0.608400 -0.002197000 -0.4745520 #>  [5,] -2.10 -0.200 -0.170   0.040000   0.028900 -0.008000000 -0.0049130 #>  [6,] -1.80 -0.360  0.950   0.129600   0.902500 -0.046656000  0.8573750 #>  [7,]  2.20  0.092  .       0.008464   .         0.000778688  .         #>  [8,]  0.76  .     -0.380   .          0.144400  .           -0.0548720 #>  [9,]  1.30 -0.780 -0.810   0.608400   0.656100 -0.474552000 -0.5314410 #> [10,]  0.81 -0.056 -0.809   0.003136   0.654481 -0.000175616 -0.5294751"},{"path":"/reference/cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlation (Sparse and Dense Matrices) — cor","title":"Correlation (Sparse and Dense Matrices) — cor","text":"cor computes sample correlation column pair sparse dense matrices.","code":""},{"path":"/reference/cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlation (Sparse and Dense Matrices) — cor","text":"","code":"cor(x, ...)  # S3 method for default cor(x, ...)  # S3 method for CsparseMatrix cor(x, ...)"},{"path":"/reference/cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlation (Sparse and Dense Matrices) — cor","text":"x matrix CsparseMatrix. ... Additional arguments pass methods.","code":""},{"path":"/reference/cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlation (Sparse and Dense Matrices) — cor","text":"pxp matrix p number matrix columns, (, j) th element corresponds sample correlation p_iand p_j.","code":""},{"path":"/reference/cor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correlation (Sparse and Dense Matrices) — cor","text":"cor() S3 generic methods : CsparseMatrix object supported stats::cor","code":""},{"path":"/reference/cor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlation (Sparse and Dense Matrices) — cor","text":"","code":"x <- Matrix::rsparsematrix(10, 3, .5) xdense <- as.matrix(x)  cor(x) #>            [,1]        [,2]        [,3] #> [1,]  1.0000000 -0.24284431  0.56767420 #> [2,] -0.2428443  1.00000000 -0.02268863 #> [3,]  0.5676742 -0.02268863  1.00000000 cor(xdense) #>            [,1]        [,2]        [,3] #> [1,]  1.0000000 -0.24284431  0.56767420 #> [2,] -0.2428443  1.00000000 -0.02268863 #> [3,]  0.5676742 -0.02268863  1.00000000"},{"path":"/reference/remove_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove constant columns — remove_constant","title":"Remove constant columns — remove_constant","text":"remove_constant() removes zero-variance columns sparse dense matrices.","code":""},{"path":"/reference/remove_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove constant columns — remove_constant","text":"","code":"remove_constant(x)  # S3 method for CsparseMatrix remove_constant(x)  # S3 method for matrix remove_constant(x)"},{"path":"/reference/remove_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove constant columns — remove_constant","text":"x matrix CsparseMatrix.","code":""},{"path":"/reference/remove_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove constant columns — remove_constant","text":"x zero-variance columns removed.","code":""},{"path":"/reference/remove_constant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove constant columns — remove_constant","text":"remove_constant() S3 generic methods : CsparseMatrix matrix","code":""},{"path":"/reference/remove_constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove constant columns — remove_constant","text":"","code":"# Create a sparse matrix with constant columns x <- Matrix::rsparsematrix(10, 3, 0.1) colnames(x) <- paste0(\"x\", 1:3) x <- cbind(x, \"x4\" = 1, \"x5\" = 54) # Print x x #> 10 x 5 sparse Matrix of class \"dgCMatrix\" #>       x1 x2    x3 x4 x5 #>  [1,]  .  .  .     1 54 #>  [2,]  .  .  0.81  1 54 #>  [3,]  .  2  .     1 54 #>  [4,]  .  .  .     1 54 #>  [5,]  .  . -0.83  1 54 #>  [6,]  .  .  .     1 54 #>  [7,]  .  .  .     1 54 #>  [8,]  .  .  .     1 54 #>  [9,]  .  .  .     1 54 #> [10,]  .  .  .     1 54  # Same matrix in dense format xdense <- as.matrix(x)  # Drop constant columns remove_constant(x) #> 10 x 2 sparse Matrix of class \"dgCMatrix\" #>       x2    x3 #>  [1,]  .  .    #>  [2,]  .  0.81 #>  [3,]  2  .    #>  [4,]  .  .    #>  [5,]  . -0.83 #>  [6,]  .  .    #>  [7,]  .  .    #>  [8,]  .  .    #>  [9,]  .  .    #> [10,]  .  .    remove_constant(xdense) #>       x2    x3 #>  [1,]  0  0.00 #>  [2,]  0  0.81 #>  [3,]  2  0.00 #>  [4,]  0  0.00 #>  [5,]  0 -0.83 #>  [6,]  0  0.00 #>  [7,]  0  0.00 #>  [8,]  0  0.00 #>  [9,]  0  0.00 #> [10,]  0  0.00"},{"path":"/reference/remove_correlated.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove highly correlated columns — remove_correlated","title":"Remove highly correlated columns — remove_correlated","text":"remove_correlated removes one column-pairs sparse dense matrices sample correlation value greater user-defined threshold.","code":""},{"path":"/reference/remove_correlated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove highly correlated columns — remove_correlated","text":"","code":"remove_correlated(x, threshold)  # S3 method for CsparseMatrix remove_correlated(x, threshold = 0.99)  # S3 method for matrix remove_correlated(x, threshold = 0.99)"},{"path":"/reference/remove_correlated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove highly correlated columns — remove_correlated","text":"x matrix CsparseMatrix. threshold double 0 1 specifying absolute correlation threshold value remove columns.","code":""},{"path":"/reference/remove_correlated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove highly correlated columns — remove_correlated","text":"x one highly correlated column-pairs removed.","code":""},{"path":"/reference/remove_correlated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove highly correlated columns — remove_correlated","text":"remove_correlated() S3 generic methods : CsparseMatrix matrix","code":""},{"path":"/reference/remove_correlated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove highly correlated columns — remove_correlated","text":"","code":"# Create a sparse matrix with very sparse columns x <- Matrix::rsparsematrix(10, 5, 0.5) x <- cbind(x, x[, 4:5], x[, 4:5]) # Create two perfectly correlated columns colnames(x) <- paste0(\"x\", 1:9) # Print x x #> 10 x 9 sparse Matrix of class \"dgCMatrix\" #>          x1    x2    x3    x4    x5    x6    x7    x8    x9 #>  [1,]  .     .     .    -0.21  .    -0.21  .    -0.21  .    #>  [2,]  1.50  .     .     .    -0.21  .    -0.21  .    -0.21 #>  [3,]  0.13  .     .     .    -0.04  .    -0.04  .    -0.04 #>  [4,] -0.14 -1.50  .     .    -0.79  .    -0.79  .    -0.79 #>  [5,]  1.00  .     .     0.24 -0.96  0.24 -0.96  0.24 -0.96 #>  [6,]  .     .    -0.88  .     .     .     .     .     .    #>  [7,]  .    -2.30  .     1.60  1.80  1.60  1.80  1.60  1.80 #>  [8,]  .     .    -0.12 -0.26  .    -0.26  .    -0.26  .    #>  [9,]  1.80 -0.19 -0.63  .     .     .     .     .     .    #> [10,] -0.77  0.19 -0.96  0.30 -0.86  0.30 -0.86  0.30 -0.86  # Same matrix in dense format xdense <- as.matrix(x)  # Drop highly correlated columns remove_correlated(x, threshold = 0.99) #> 10 x 5 sparse Matrix of class \"dgCMatrix\" #>          x1    x2    x3    x4    x5 #>  [1,]  .     .     .    -0.21  .    #>  [2,]  1.50  .     .     .    -0.21 #>  [3,]  0.13  .     .     .    -0.04 #>  [4,] -0.14 -1.50  .     .    -0.79 #>  [5,]  1.00  .     .     0.24 -0.96 #>  [6,]  .     .    -0.88  .     .    #>  [7,]  .    -2.30  .     1.60  1.80 #>  [8,]  .     .    -0.12 -0.26  .    #>  [9,]  1.80 -0.19 -0.63  .     .    #> [10,] -0.77  0.19 -0.96  0.30 -0.86 remove_correlated(xdense, threshold = 0.99) #>          x1    x2    x3    x4    x5 #>  [1,]  0.00  0.00  0.00 -0.21  0.00 #>  [2,]  1.50  0.00  0.00  0.00 -0.21 #>  [3,]  0.13  0.00  0.00  0.00 -0.04 #>  [4,] -0.14 -1.50  0.00  0.00 -0.79 #>  [5,]  1.00  0.00  0.00  0.24 -0.96 #>  [6,]  0.00  0.00 -0.88  0.00  0.00 #>  [7,]  0.00 -2.30  0.00  1.60  1.80 #>  [8,]  0.00  0.00 -0.12 -0.26  0.00 #>  [9,]  1.80 -0.19 -0.63  0.00  0.00 #> [10,] -0.77  0.19 -0.96  0.30 -0.86"},{"path":"/reference/remove_duplicate.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove duplicate columns — remove_duplicate","title":"Remove duplicate columns — remove_duplicate","text":"remove_duplicate() removes duplicate columns sparse dense matrices.","code":""},{"path":"/reference/remove_duplicate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove duplicate columns — remove_duplicate","text":"","code":"remove_duplicate(x)  # S3 method for CsparseMatrix remove_duplicate(x)  # S3 method for matrix remove_duplicate(x)"},{"path":"/reference/remove_duplicate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove duplicate columns — remove_duplicate","text":"x matrix CsparseMatrix.","code":""},{"path":"/reference/remove_duplicate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove duplicate columns — remove_duplicate","text":"x duplicate columns removed.","code":""},{"path":"/reference/remove_duplicate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove duplicate columns — remove_duplicate","text":"remove_duplicate() S3 generic methods : CsparseMatrix matrix","code":""},{"path":"/reference/remove_duplicate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove duplicate columns — remove_duplicate","text":"","code":"# Create a sparse matrix with duplicated columns x <- Matrix::rsparsematrix(10, 4, 0.1) colnames(x) <- paste0(\"x\", 1:4) x <- cbind(x, x[, c(1, 4)]) # Print x x #> 10 x 6 sparse Matrix of class \"dgCMatrix\" #>          x1 x2   x3    x4    x1    x4 #>  [1,]  .     . .    -1.10  .    -1.10 #>  [2,]  .     . .     .     .     .    #>  [3,]  .     . .     .     .     .    #>  [4,] -0.33  . .     .    -0.33  .    #>  [5,]  .     . .     .     .     .    #>  [6,]  .     . .     0.54  .     0.54 #>  [7,]  .     . .     .     .     .    #>  [8,]  .     . .     .     .     .    #>  [9,]  .     . .     .     .     .    #> [10,]  .     . 0.47  .     .     .     # Same matrix in dense format xdense <- as.matrix(x)  # Drop duplicate columns remove_duplicate(x) #> 10 x 4 sparse Matrix of class \"dgCMatrix\" #>          x1 x2   x3    x4 #>  [1,]  .     . .    -1.10 #>  [2,]  .     . .     .    #>  [3,]  .     . .     .    #>  [4,] -0.33  . .     .    #>  [5,]  .     . .     .    #>  [6,]  .     . .     0.54 #>  [7,]  .     . .     .    #>  [8,]  .     . .     .    #>  [9,]  .     . .     .    #> [10,]  .     . 0.47  .    remove_duplicate(xdense) #>          x1 x2   x3    x4 #>  [1,]  0.00  0 0.00 -1.10 #>  [2,]  0.00  0 0.00  0.00 #>  [3,]  0.00  0 0.00  0.00 #>  [4,] -0.33  0 0.00  0.00 #>  [5,]  0.00  0 0.00  0.00 #>  [6,]  0.00  0 0.00  0.54 #>  [7,]  0.00  0 0.00  0.00 #>  [8,]  0.00  0 0.00  0.00 #>  [9,]  0.00  0 0.00  0.00 #> [10,]  0.00  0 0.47  0.00"},{"path":"/reference/remove_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove empty (all-zero) columns — remove_empty","title":"Remove empty (all-zero) columns — remove_empty","text":"remove_empty() removes -zero columns sparse dense matrices.","code":""},{"path":"/reference/remove_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove empty (all-zero) columns — remove_empty","text":"","code":"remove_empty(x)  # S3 method for CsparseMatrix remove_empty(x)  # S3 method for matrix remove_empty(x)"},{"path":"/reference/remove_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove empty (all-zero) columns — remove_empty","text":"x matrix CsparseMatrix.","code":""},{"path":"/reference/remove_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove empty (all-zero) columns — remove_empty","text":"x -zero columns removed.","code":""},{"path":"/reference/remove_empty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove empty (all-zero) columns — remove_empty","text":"remove_empty() S3 generic methods : CsparseMatrix matrix","code":""},{"path":"/reference/remove_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove empty (all-zero) columns — remove_empty","text":"","code":"# Create a sparse matrix with constant columns x <- Matrix::rsparsematrix(10, 3, 0.1) x <- cbind(x, 0) colnames(x) <- paste0(\"x\", 1:4) # Print x x #> 10 x 4 sparse Matrix of class \"dgCMatrix\" #>          x1 x2    x3 x4 #>  [1,]  .     . -0.55  . #>  [2,]  .     .  .     . #>  [3,] -1.50  .  .     . #>  [4,]  .     .  .     . #>  [5,]  .     .  .     . #>  [6,]  .     .  .     . #>  [7,]  .     .  .     . #>  [8,]  .     .  .     . #>  [9,]  0.27  .  .     . #> [10,]  .     .  .     .  # Same matrix in dense format xdense <- as.matrix(x)  # Drop empty columns remove_empty(x) #> 10 x 2 sparse Matrix of class \"dgCMatrix\" #>          x1    x3 #>  [1,]  .    -0.55 #>  [2,]  .     .    #>  [3,] -1.50  .    #>  [4,]  .     .    #>  [5,]  .     .    #>  [6,]  .     .    #>  [7,]  .     .    #>  [8,]  .     .    #>  [9,]  0.27  .    #> [10,]  .     .    remove_empty(xdense) #>          x1    x3 #>  [1,]  0.00 -0.55 #>  [2,]  0.00  0.00 #>  [3,] -1.50  0.00 #>  [4,]  0.00  0.00 #>  [5,]  0.00  0.00 #>  [6,]  0.00  0.00 #>  [7,]  0.00  0.00 #>  [8,]  0.00  0.00 #>  [9,]  0.27  0.00 #> [10,]  0.00  0.00"},{"path":"/reference/remove_sparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove extremely sparse columns — remove_sparse","title":"Remove extremely sparse columns — remove_sparse","text":"remove_sparse() removes columns sparse dense matrices sparsity value greater user-defined threshold.","code":""},{"path":"/reference/remove_sparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove extremely sparse columns — remove_sparse","text":"","code":"remove_sparse(x, threshold)  # S3 method for CsparseMatrix remove_sparse(x, threshold)  # S3 method for matrix remove_sparse(x, threshold)"},{"path":"/reference/remove_sparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove extremely sparse columns — remove_sparse","text":"x matrix CsparseMatrix. threshold double 0 1 specifying sparsity threshold remove columns.","code":""},{"path":"/reference/remove_sparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove extremely sparse columns — remove_sparse","text":"x sparse columns removed.","code":""},{"path":"/reference/remove_sparse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove extremely sparse columns — remove_sparse","text":"remove_sparse() S3 generic methods : CsparseMatrix matrix","code":""},{"path":"/reference/remove_sparse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove extremely sparse columns — remove_sparse","text":"","code":"# Create a sparse matrix with very sparse columns x <- Matrix::rsparsematrix(10, 5, 0.1) colnames(x) <- paste0(\"x\", 1:5) # Print x x #> 10 x 5 sparse Matrix of class \"dgCMatrix\" #>        x1   x2   x3 x4     x5 #>  [1,] .   0.38 .     .  .     #>  [2,] .   .    .     .  .     #>  [3,] .   .    .     . -0.029 #>  [4,] .   .    .     .  .     #>  [5,] .   .    .     .  .     #>  [6,] .   .    .     .  .     #>  [7,] .   .    0.95  .  .     #>  [8,] .   .    .     . -1.800 #>  [9,] .   .    .     .  .     #> [10,] 0.4 .    .     .  .      # Same matrix in dense format xdense <- as.matrix(x)  # Drop duplicate columns remove_sparse(x, threshold = 0.9) #> 10 x 1 sparse Matrix of class \"dgCMatrix\" #>           x5 #>  [1,]  .     #>  [2,]  .     #>  [3,] -0.029 #>  [4,]  .     #>  [5,]  .     #>  [6,]  .     #>  [7,]  .     #>  [8,] -1.800 #>  [9,]  .     #> [10,]  .     remove_sparse(xdense, threshold = 0.9) #>           x5 #>  [1,]  0.000 #>  [2,]  0.000 #>  [3,] -0.029 #>  [4,]  0.000 #>  [5,]  0.000 #>  [6,]  0.000 #>  [7,]  0.000 #>  [8,] -1.800 #>  [9,]  0.000 #> [10,]  0.000"},{"path":"/reference/sparseprepr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"sparseprepr: Pre Processing for Sparse Matrices — sparseprepr-package","title":"sparseprepr: Pre Processing for Sparse Matrices — sparseprepr-package","text":"Sparse matrices allow -memory modeling large data sets. package enables common pre-processing actions sparse matrices provides memory-efficient workflow modeling scale.","code":""},{"path":"/reference/sparseprepr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sparseprepr: Pre Processing for Sparse Matrices — sparseprepr-package","text":"Maintainer: Daniel Molitor molitdj97@gmail.com","code":""},{"path":"/reference/transform_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Sparse Matrix columns — transform_cols","title":"Transform Sparse Matrix columns — transform_cols","text":"transform_cols() transforms specified matrix columns user-supplied function.","code":""},{"path":"/reference/transform_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Sparse Matrix columns — transform_cols","text":"","code":"transform_cols(x, fns, ..., which.cols, drop, name.sep)  # S3 method for CsparseMatrix transform_cols(x, fns, ..., which.cols, drop = FALSE, name.sep = NULL)  # S3 method for matrix transform_cols(x, fns, ..., which.cols, drop = FALSE, name.sep = NULL)"},{"path":"/reference/transform_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Sparse Matrix columns — transform_cols","text":"x matrix CsparseMatrix. fns user-supplied function, list functions, apply specified columns. ... Additional arguments pass fns. important note arguments passed every function fns, include arguments relevant function. .cols numeric vector indicating column indices character vector indicating column names. drop logical value. functions fns work columnar matrices, set drop = FALSE, otherwise functions fns require numeric vector, set drop = TRUE. working large sparse matrices, essential set drop = FALSE, alternative much memory intensive. name.sep NULL value list corresponding element fns. name.sep NULL specified columns transformed -place, provided length(fns) == 1. fns one element, name.sep NULL, default numeric vector equal length(fns). name.sep provided list, element list must contain character vector length 1 nrow(x) appended existing column names create new column names. Providing argument ensures transformed columns appended new matrix columns.","code":""},{"path":"/reference/transform_cols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Sparse Matrix columns — transform_cols","text":"transform_cols() S3 generic methods : CsparseMatrix matrix","code":""},{"path":"/reference/transform_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Sparse Matrix columns — transform_cols","text":"","code":"x <- Matrix::rsparsematrix(10, 4, .9) colnames(x) <- paste0(\"x\", 1:4) x #> 10 x 4 sparse Matrix of class \"dgCMatrix\" #>           x1    x2     x3    x4 #>  [1,] -0.110 -0.18 -0.094 -0.29 #>  [2,]  1.700 -0.82  1.400  0.64 #>  [3,]  0.640  0.61 -0.910 -0.66 #>  [4,]  0.042 -0.25 -0.054  0.79 #>  [5,] -0.660 -0.43  0.057 -0.47 #>  [6,]  0.620  0.09  1.700  .    #>  [7,] -0.920  0.47  0.180  .    #>  [8,] -1.500  .     0.510 -0.68 #>  [9,]  0.450  1.60  0.720 -0.64 #> [10,] -1.000  .     0.130  0.74  # Convert columns in-place with a single function transform_cols(x, fns = function(i) i^2, which.cols = 3:4) #> 10 x 4 sparse Matrix of class \"dgCMatrix\" #>           x1    x2       x3     x4 #>  [1,] -0.110 -0.18 0.008836 0.0841 #>  [2,]  1.700 -0.82 1.960000 0.4096 #>  [3,]  0.640  0.61 0.828100 0.4356 #>  [4,]  0.042 -0.25 0.002916 0.6241 #>  [5,] -0.660 -0.43 0.003249 0.2209 #>  [6,]  0.620  0.09 2.890000 .      #>  [7,] -0.920  0.47 0.032400 .      #>  [8,] -1.500  .    0.260100 0.4624 #>  [9,]  0.450  1.60 0.518400 0.4096 #> [10,] -1.000  .    0.016900 0.5476 transform_cols(x, fns = function(i) i^2, which.cols = c(\"x3\", \"x4\")) #> 10 x 4 sparse Matrix of class \"dgCMatrix\" #>           x1    x2       x3     x4 #>  [1,] -0.110 -0.18 0.008836 0.0841 #>  [2,]  1.700 -0.82 1.960000 0.4096 #>  [3,]  0.640  0.61 0.828100 0.4356 #>  [4,]  0.042 -0.25 0.002916 0.6241 #>  [5,] -0.660 -0.43 0.003249 0.2209 #>  [6,]  0.620  0.09 2.890000 .      #>  [7,] -0.920  0.47 0.032400 .      #>  [8,] -1.500  .    0.260100 0.4624 #>  [9,]  0.450  1.60 0.518400 0.4096 #> [10,] -1.000  .    0.016900 0.5476  # Mutate new columns with a single function transform_cols(x, fns = scale, which.cols = 3:4, name.sep = \"scaled\") #> 10 x 6 sparse Matrix of class \"dgCMatrix\" #>           x1    x2     x3    x4  x3_scaled   x4_scaled #>  [1,] -0.110 -0.18 -0.094 -0.29 -0.6026003 -0.39313052 #>  [2,]  1.700 -0.82  1.400  0.64  1.3635165  1.17601706 #>  [3,]  0.640  0.61 -0.910 -0.66 -1.6764634 -1.01741505 #>  [4,]  0.042 -0.25 -0.054  0.79 -0.5499600  1.42910538 #>  [5,] -0.660 -0.43  0.057 -0.47 -0.4038830 -0.69683651 #>  [6,]  0.620  0.09  1.700  .     1.7583191  0.09617356 #>  [7,] -0.920  0.47  0.180  .    -0.2420140  0.09617356 #>  [8,] -1.500  .     0.510 -0.68  0.1922689 -1.05116015 #>  [9,]  0.450  1.60  0.720 -0.64  0.4686307 -0.98366994 #> [10,] -1.000  .     0.130  0.74 -0.3078144  1.34474261  # Mutate new columns with a list of functions and names transform_cols(   x,   fns = c(function(i) i^2, function(i) i^3),   which.cols = 3:4,   name.sep = c(\"squared\", \"cubed\") ) #> 10 x 8 sparse Matrix of class \"dgCMatrix\" #>           x1    x2     x3    x4 x3_squared x4_squared     x3_cubed  x4_cubed #>  [1,] -0.110 -0.18 -0.094 -0.29   0.008836     0.0841 -0.000830584 -0.024389 #>  [2,]  1.700 -0.82  1.400  0.64   1.960000     0.4096  2.744000000  0.262144 #>  [3,]  0.640  0.61 -0.910 -0.66   0.828100     0.4356 -0.753571000 -0.287496 #>  [4,]  0.042 -0.25 -0.054  0.79   0.002916     0.6241 -0.000157464  0.493039 #>  [5,] -0.660 -0.43  0.057 -0.47   0.003249     0.2209  0.000185193 -0.103823 #>  [6,]  0.620  0.09  1.700  .      2.890000     .       4.913000000  .        #>  [7,] -0.920  0.47  0.180  .      0.032400     .       0.005832000  .        #>  [8,] -1.500  .     0.510 -0.68   0.260100     0.4624  0.132651000 -0.314432 #>  [9,]  0.450  1.60  0.720 -0.64   0.518400     0.4096  0.373248000 -0.262144 #> [10,] -1.000  .     0.130  0.74   0.016900     0.5476  0.002197000  0.405224  # Mutate new columns with a list of functions and names for each new column transform_cols(   x,   fns = c(function(i) i^2, function(i) i^3),   which.cols = 3:4,   name.sep = list(paste0(\"squared\", 1:2), paste0(\"cubed\", 1:2)) ) #> 10 x 8 sparse Matrix of class \"dgCMatrix\" #>           x1    x2     x3    x4 x3_squared1 x4_squared2    x3_cubed1 x4_cubed2 #>  [1,] -0.110 -0.18 -0.094 -0.29    0.008836      0.0841 -0.000830584 -0.024389 #>  [2,]  1.700 -0.82  1.400  0.64    1.960000      0.4096  2.744000000  0.262144 #>  [3,]  0.640  0.61 -0.910 -0.66    0.828100      0.4356 -0.753571000 -0.287496 #>  [4,]  0.042 -0.25 -0.054  0.79    0.002916      0.6241 -0.000157464  0.493039 #>  [5,] -0.660 -0.43  0.057 -0.47    0.003249      0.2209  0.000185193 -0.103823 #>  [6,]  0.620  0.09  1.700  .       2.890000      .       4.913000000  .        #>  [7,] -0.920  0.47  0.180  .       0.032400      .       0.005832000  .        #>  [8,] -1.500  .     0.510 -0.68    0.260100      0.4624  0.132651000 -0.314432 #>  [9,]  0.450  1.60  0.720 -0.64    0.518400      0.4096  0.373248000 -0.262144 #> [10,] -1.000  .     0.130  0.74    0.016900      0.5476  0.002197000  0.405224"}]
